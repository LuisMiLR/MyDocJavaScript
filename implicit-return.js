//********************************************************* Implicit Return (retour implicite) ***********************************************************************

/* Lorsque vous n√©gligez d'inclure l'instruction `return` dans une fonction JavaScript, le r√©sultat obtenu est implicitement 
d√©fini comme `undefined`. L'adjectif "implicite" indique que bien que le `return` ne soit pas explicitement √©crit, 
le r√©sultat est n√©anmoins d√©duit, ce qui signifie qu'√† d√©faut d'une valeur de retour sp√©cifique, la fonction renverra 
automatiquement `undefined`. 

exemple : 
*/
const sum = (a, b) => {
  a + b;
};

sum(1, 3); // undefined

/* Comme vous pouvez le voir, sum(1, 3)renvoie undefined car nous n'avions pas de return mot-cl√© dans le corps de la fonction.

Cependant, avec les fonctions fl√©ch√©es, vous pouvez implicitement renvoyer le r√©sultat de la fonction dans certaines conditions 
tr√®s sp√©cifiques. Commen√ßons par un exemple puis nous expliquerons comment nous y sommes arriv√©s : 
*/

// this works üëç (implicit return)
const sums = (a, b) => a + b;

sums(1, 3); // 4

/* Alors, comment se fait-il que cet exemple fonctionne et que le pr√©c√©dent ne fonctionne pas ? Ni l‚Äôun ni l‚Äôautre n‚Äôincluent 
le return mot-cl√©. L'un d'eux fonctionne et l'autre revient ind√©fini. En effet, pour le retour implicite au travail, vous devez 
remplir toutes les conditions suivantes :

1 Votre fonction doit √™tre une fonction fl√©ch√©e.
2 Le corps de la fonction ne doit √™tre qu'une seule instruction . Cela signifie que vous devez supprimer les accolades.
3 Vous devez supprimer le return mot-cl√© car le corps de la fonction est une seule instruction.
Lorsque toutes ces conditions sont remplies, la fonction fl√®che renverra implicitement le r√©sultat de son corps de fonction 
(qui n'est qu'une seule ligne). 

Prenons un autre exemple : */

const isLegal = (age) => {
  return age >= 18;
};

/* Utilisons maintenant le retour implicite par :

1 supprimer les accolades
2 supprimer le return mot-cl√© 
*/
const isLegals = (age) => age >= 18;

/* La syntaxe peut para√Ætre bizarre au d√©but, mais une fois que vous vous y serez habitu√©, vous vous rendrez compte qu'elle est 
vraiment √©l√©gante. Voici comment vous pouvez le lire :
isLegal est une fonction qui prend l'√¢ge et renvoie le r√©sultat de l'expression age >= 18. 

***************** N'utilisez le retour implicite que lorsque le corps de la fonction est court et d'une seule ligne. Ne sacrifiez 
jamais la lisibilit√© et la clart√© du code pour utiliser une certaine fonctionnalit√© .

Le retour implicite ne fonctionne que lorsqu'il y a une seule instruction √† l'int√©rieur de la fonction (et que les accolades et return 
le mot-cl√© sont omis).

Aller plus loin
Comme mentionn√© dans le chapitre pr√©c√©dent, lorsque vous n'avez qu'un seul param√®tre, vous pouvez supprimer les parenth√®ses autour 
du param√®tre. Le code ci-dessus devient :
*/

const isLegalz = (age) => age >= 18;

/* r√©sumer
Voici les conditions de retour implicite :
Votre fonction doit √™tre une fonction fl√©ch√©e.
Le corps de la fonction ne doit √™tre qu'une seule instruction . Cela signifie que vous devez supprimer les accolades.
Vous devez supprimer le returnmot-cl√© car le corps de la fonction est une seule instruction.
N'utilisez le retour implicite que lorsque le corps de la fonction est court et d'une seule ligne. Ne sacrifiez jamais la lisibilit√© et la clart√© du code pour utiliser une certaine fonctionnalit√©.
Le retour implicite ne fonctionne que lorsqu'il y a une seule instruction √† l'int√©rieur de la fonction (et que les accolades et returnle mot-cl√© sont omis). */
