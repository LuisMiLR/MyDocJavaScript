//************************************************************************ class vs function *************************************************************************
//********************************************************************************************************************************************************************

/* 
Attention : ce chapitre est essentiellement th√©orique. Il explique le fonctionnement de l'h√©ritage en JavaScript ainsi que la cha√Æne de prototypes.
JavaScript n'a pas de vraies classes ! üò® La classsyntaxe que vous voyez s'appelle sucre syntaxique, un terme sophistiqu√© pour dire que c'est une syntaxe 
qui rend votre code plus lisible (comme un √©dulcorant).

*/
class Rectangle {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }

  isSquare() {
    return this.width === this.height;
  }
}
//En fait, si vous interrogez JavaScript sur le type de Rectangle, vous obtiendrez la fonction :
typeof Rectangle; //"function"

/* 
la classe est une fonction
Avant que le classmot-cl√© ne soit ajout√© au langage en 2015, voici comment nous √©crivions ¬´ classes ¬ª :
*/
function Rectangle(width, height) {
  this.width = width;
  this.height = height;
}
//?Cette fonction sert de constructeur. C'est ce qu'on appelle le mod√®le de constructeur de fonctions en JavaScript .

/* Lorsque vous l'ex√©cutez, new Rectangle(15, 20)il appelle la fonction Rectangleet vous donne une thisvariable √† laquelle vous pouvez ajouter 
variables d'instance(comme widthet height).
Cette syntaxe n'est pas simple pour la plupart des d√©veloppeurs, et vous pouvez parfaitement ressentir cela. Mais ce qui est important, 
c'est de pouvoir le reconna√Ætre. 

//***** Ajout de m√©thodes d'instance
Si c'est ainsi que vous √©crivez un classmod√®le de constructeur de fonction, alors comment ajouter une m√©thode personnalis√©e ?
*/

//This is the constructor
function Rectangles(width, height) {
  this.width = width;
  this.height = height;
}

// this is an instance method (that you can call on new instances of Rectangle)
// Note: this has to be a function (not an arrow function), will be explained later on in Lexical scope
Rectangle.prototype.isSquare = function () {
  return this.width === this.height;
};

/* 
Pourquoi y a-t-il un prototype et qu'est-ce que c'est ?

C'est probablement la premi√®re question qui me vient √† l'esprit.

?Vous pouvez consid√©rer le prototypecomme un objet contenant toutes les m√©thodes d'instance qu'une certaine fonction peut avoir. 
?Ce prototype s'encha√Æne dans ce que nous appelons la cha√Æne des prototypes. Ceci est expliqu√© dans la le√ßon suivante .

Ainsi, en attribuant une nouvelle fonction, Rectangle.prototype vous ajoutez une nouvelle m√©thode d'instance aux instances de Rectangle .
Cela signifie que chaque fois que vous cr√©ez un new Rectangle, cette instance aura une m√©thode d'instance appel√©e isSquare qui peut acc√©der aux propri√©t√©s de 
l'instance via this.(par exemple, this.widthet this.height).

Encore une fois, la syntaxe n'est pas la meilleure, mais il y a une raison derri√®re cela, que vous d√©couvrirez dans la prochaine le√ßon !



//******* Documentation

Si vous jetez un ≈ìil √† la documentation sur Mozilla Developer Network, vous voyez souvent String.prototype.trim() .
Cela signifie que trim() est une m√©thode qui peut √™tre appel√©e sur des instances de String . Cela signifie que trim() peut √™tre appel√© sur n'importe quelle nouvelle cha√Æne que vous cr√©ez.


//******* r√©sumer

- La classsyntaxe a √©t√© ajout√©e en 2015 et doit √™tre utilis√©e car elle facilite la lecture de la syntaxe.

- A classcr√©e un functionavec le mod√®le de constructeur (doit √™tre appel√© avec new)

- L'ajout d'une fonction au prototyped'une fonction nous permet d'ajouter une nouvelle m√©thode personnalis√©e aux instances de cette fonction.

- Vous n‚Äô√©crirez probablement pas cette syntaxe vous-m√™me, mais il est important de la comprendre et de pouvoir la reconna√Ætre.

*/
