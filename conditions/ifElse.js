//If & else

//Il est parfois possible de supprimer le else. Jetons un coup d'Å“il Ã  un exemple :
function canVote(age) {
  if (age >= 18) {
    return true;
  } else {
    return false;
  }
}
/* Puisque cette fonction effectue deux actions diffÃ©rentes basÃ©es sur le rÃ©sultat de la condition 
if et de son opposÃ© (else), alors nous pouvons la rÃ©Ã©crire en supprimant le elsemot-clÃ© : */

function canVote(age) {
  if (age >= 18) {
    return true;
  }
  return false;
}

/* Ces deux fonctions auront exactement le mÃªme rÃ©sultat. C'est parce que le returnmot clÃ© quittera 
la fonction avec le rÃ©sultat. Ainsi, lorsque l'Ã¢ge est supÃ©rieur ou Ã©gal Ã  18 ans, la fonction reviendra true 
et le reste du code ne s'exÃ©cutera pas .
Cependant, lorsque lâ€™Ã¢ge est infÃ©rieur Ã  18 ans, le code contenu dans la ifcondition ne sâ€™exÃ©cute pas. Ainsi, 
la seule ligne qui sâ€™exÃ©cute est la derniÃ¨re, Ã  savoir return false.

Nous profiterons de cette astuce plus tard dans ce cours pour en apprendre davantage sur un modÃ¨le courant appelÃ© retour anticipÃ© . */

////if and boolean
// Chaque fois que vous renvoyez un boolÃ©en ( trueou false), il est assez redondant d'utiliser ifand else. Voici un exemple :
function isPassing(grade) {
  if (grade >= 10) {
    return true;
  } else {
    return false;
  }
}

isPassing(12);
/* Ceci est redondant car grade >= 10, Ã  lui seul, il est Ã©valuÃ© Ã  vrai ou faux en fonction de la note. Cela signifie 
que vous n'avez pas besoin de l'envelopper avec une instruction if/else.

C'est pourquoi vous pouvez le refactoriser comme ceci : */
function isPassing(grade) {
  return grade >= 10;
}
/* sans utiliser if/else qui renverra toujours un boolÃ©en !

Cela ne fonctionne que lorsque vous renvoyez un boolÃ©en Ã  partir d'une fonction.

Suivez-moi sur Twitter/Instagram
Une introduction tardive : HÃ© ğŸ‘‹, je m'appelle Jad. Je suis l'auteur de ce cours ainsi que le crÃ©ateur et le mainteneur de la plateforme sur laquelle vous Ã©tudiez.

 */
