//Array of object

/*Les tableaux d'objets sont une structure de donn√©es tr√®s utile et flexible. 
Ils vous permettent de stocker et d'organiser des collections d'objets, o√π chaque √©l√©ment du tableau est un objet avec ses propres propri√©t√©s et valeurs. 

//*### ************************************* Introduction aux Tableaux d'Objets en JavaScript

#### 1. D√©finition d'un Objet en JavaScript
un objet est une collection de propri√©t√©s, o√π chaque propri√©t√© a un nom (cl√©) et une valeur associ√©e. Par exemple :

let personne = {
    nom: "John",
    age: 30,
    ville: "Paris"
};

Dans cet exemple, `personne` est un objet avec trois propri√©t√©s : `nom`, `age`, et `ville`.


#### 2. Cr√©ation d'un Tableau d'Objets
Un tableau d'objets est simplement un tableau o√π chaque √©l√©ment est un objet. Vous pouvez cr√©er un tableau d'objets de la mani√®re suivante :

let personnes = [
    { nom: "John", age: 30, ville: "Paris" },
    { nom: "Alice", age: 25, ville: "Londres" },
    { nom: "Bob", age: 35, ville: "New York" }
];

Dans cet exemple, `personnes` est un tableau d'objets contenant trois objets repr√©sentant diff√©rentes personnes.


#### 3. Acc√®s aux Propri√©t√©s des Objets dans un Tableau
Pour acc√©der aux propri√©t√©s des objets dans un tableau, vous pouvez utiliser la notation des crochets (`[]`) ou la notation du point (`.`). Par exemple :


console.log(personnes[0].nom); // Affiche "John"
console.log(personnes[1]["age"]); // Affiche 25


#### 4. Parcourir un Tableau d'Objets
Pour parcourir tous les objets dans un tableau, vous pouvez utiliser une boucle `for` ou `forEach`. Par exemple :


// Utilisation d'une boucle for
for (let i = 0; i < personnes.length; i++) {
    console.log(personnes[i].nom);
}

// Utilisation de forEach
personnes.forEach(function(personne) {
    console.log(personne.ville);
});


#### 5. Ajout et Suppression d'Objets dans un Tableau
Vous pouvez ajouter un nouvel objet √† un tableau √† l'aide de la m√©thode `push()` et supprimer un objet √† l'aide de la m√©thode `splice()`. Par exemple :


// Ajouter un nouvel objet
personnes.push({ nom: "Emily", age: 28, ville: "Berlin" });

// Supprimer un objet
personnes.splice(1, 1); // Supprime l'objet √† l'index 1


Ceci est une introduction de base aux tableaux d'objets en JavaScript. Avec cette connaissance, vous pouvez commencer √† manipuler et √† travailler avec des collections 
complexes de donn√©es dans vos programmes JavaScript. */

//************************************************************* transform arrays of objects ***************************************************************************
//*********************************************************************************************************************************************************************

// Comme nous l'avons √©tudi√© pr√©c√©demment, la .map()m√©thode array permet de transformer un tableau en un autre tableau de m√™me taille .

// Voici un exemple de .map()ce que nous avons vu pr√©c√©demment :

const names = ["sam", "Alex"];

const upperNames = names.map((name) => name.toUpperCase());
console.log(upperNames); // ["SAM", "ALEX"]

//Dans cet exemple, nous transformons un tableau de cha√Ænes en un nouveau tableau de cha√Ænes o√π les √©l√©ments sont en majuscules .

// Cela .map()fonctionne de la m√™me mani√®re pour les tableaux d‚Äôobjets. Vous pouvez transformer
// un tableau d'objets en un nouveau tableau d'objets, ou vous pouvez le transformer en un tableau de cha√Ænes ou un tableau de nombres.
// Cela vous permet d' extraire certaines propri√©t√©s d'un tableau d'objets. Voici un exemple :

const tweets = [
  {
    id: 1080777336298049537,
    message: "Hello Twitter üëã",
    created_at: "2020-01-03 11:46:00",
  },
  {
    id: 1080777336298195435,
    message: "How do you keep track of your notes?",
    created_at: "2021-02-19 15:32:00",
  },
];

const messages = tweets.map((tweet) => tweet.message);
console.log(messages); // ["Hello Twitter üëã", "How do you keep track of your notes?"]

// Remarquez comment nous sommes capables d'extraire la messagepropri√©t√© de chaque tweet, nous avons donc fini
// par transformer un tableau d'objets ( tweets) en un tableau de cha√Ænes ( messages).

// N'oubliez pas d'√™tre √† console.log(tweet)l'int√©rieur du .map()rappel pour visualiser l'objet .

//R√©sum√©

// Les tableaux d'objets sont le type de donn√©es le plus courant que vous rencontrerez lorsque vous travaillez dans le
// d√©veloppement Web, car la plupart des API (par exemple, une API m√©t√©o, une API Twitter, etc.) renvoient des tableaux d'objets.
// Un conseil tr√®s important lorsque vous travaillez avec des tableaux d'objets, en particulier lors d'une it√©ration sur un tableau
// d'objets, consiste √† ajouter console.log()tout au long de votre code pour visualiser l'objet que vous recevez dans le rappel.
