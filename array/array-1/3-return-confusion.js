//Return confusion

/*
Dans cette le√ßon, nous aborderons une confusion courante lorsqu'il s'agit de revenir √† l'int√©rieur d'une fonction qui contient un .forEach()appel.

Mais d‚Äôabord, parlons un peu plus de la d√©nomination des variables lors de l‚Äôit√©ration.

Nommer les variables
Nommer les variables avec un nom clair permet √† vous et aux autres de comprendre le code beaucoup plus facilement. Cela est particuli√®rement vrai avec l'it√©ration .

Il est donc toujours judicieux d'utiliser le pluriel pour le tableau et le singulier pour l' √©l√©ment du tableau .
Voici quelques exemples :

notes => l'article est de qualit√©
personnes => l'√©l√©ment est une personne
Cela peut sembler √™tre un conseil mineur, mais cela fait une grande diff√©rence ! üí°

Voici un exemple de code bas√© sur ce qui pr√©c√®de :
*/

const grades = [10, 14, 15]; // array (plural)
grades.forEach(function(grade) { // array item (singular)
    console.log(grade);
});


const people = ["Sam", "Alex"]; // array (plural)
people.forEach(function(person) { // array item (singular)
    console.log(person);
});

//returning from loop

/* 
Il y a une erreur courante qui se produit lorsque vous essayez de faire un return √† partir d'une fonction qui contient un appel forEach. C'est parce qu'il y a 2 fonctions. Disons que vous avez cette fonction :
*/

function logUserIds(userIds) {
    userIds.forEach(function(userId) {
        console.log(userId);
    });
}
//et vous souhaitez que cette fonction soit return true ex√©cut√©e une fois termin√©e. O√π placez-vous le return true?

function logUserIds(userIds) {
    userIds.forEach(function(userId) {
        console.log(userId);
    });
    return true; 
}

//L' return trueint√©rieur de la fonction n'est pas vraiment utile car il va revenir de la fonction de rappel mais il n'y a plus de code √† l'int√©rieur de cette fonction de toute fa√ßon. L'it√©ration suivante de la .forEach()fonction se produira toujours. De plus, la .forEach()m√©thode retournera toujours, undefinedpeu importe ce que vous renvoyez √† l'int√©rieur .